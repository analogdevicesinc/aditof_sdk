// source: buffer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.payload.BufferInfo', null, global);
goog.exportSymbol('proto.payload.CameraType', null, global);
goog.exportSymbol('proto.payload.ClientRequest', null, global);
goog.exportSymbol('proto.payload.FrameDetails', null, global);
goog.exportSymbol('proto.payload.ImagerInfo', null, global);
goog.exportSymbol('proto.payload.SensorsInfo', null, global);
goog.exportSymbol('proto.payload.ServerResponse', null, global);
goog.exportSymbol('proto.payload.ServerStatus', null, global);
goog.exportSymbol('proto.payload.Status', null, global);
goog.exportSymbol('proto.payload.StorageInfo', null, global);
goog.exportSymbol('proto.payload.TemperatureSensorInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ImagerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.ImagerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.ImagerInfo.displayName = 'proto.payload.ImagerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.StorageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.StorageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.StorageInfo.displayName = 'proto.payload.StorageInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.TemperatureSensorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.TemperatureSensorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.TemperatureSensorInfo.displayName = 'proto.payload.TemperatureSensorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.SensorsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.SensorsInfo.repeatedFields_, null);
};
goog.inherits(proto.payload.SensorsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.SensorsInfo.displayName = 'proto.payload.SensorsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.BufferInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.BufferInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.BufferInfo.displayName = 'proto.payload.BufferInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.FrameDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payload.FrameDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.FrameDetails.displayName = 'proto.payload.FrameDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.ClientRequest.repeatedFields_, null);
};
goog.inherits(proto.payload.ClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.ClientRequest.displayName = 'proto.payload.ClientRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payload.ServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payload.ServerResponse.repeatedFields_, null);
};
goog.inherits(proto.payload.ServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payload.ServerResponse.displayName = 'proto.payload.ServerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ImagerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ImagerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ImagerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ImagerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    id: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ImagerInfo}
 */
proto.payload.ImagerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ImagerInfo;
  return proto.payload.ImagerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ImagerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ImagerInfo}
 */
proto.payload.ImagerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ImagerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ImagerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ImagerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ImagerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.payload.ImagerInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ImagerInfo} returns this
 */
proto.payload.ImagerInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 id = 20;
 * @return {number}
 */
proto.payload.ImagerInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.ImagerInfo} returns this
 */
proto.payload.ImagerInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.StorageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.StorageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.StorageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.StorageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    id: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.StorageInfo}
 */
proto.payload.StorageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.StorageInfo;
  return proto.payload.StorageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.StorageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.StorageInfo}
 */
proto.payload.StorageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.StorageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.StorageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.StorageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.StorageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.payload.StorageInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.StorageInfo} returns this
 */
proto.payload.StorageInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 id = 20;
 * @return {number}
 */
proto.payload.StorageInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.StorageInfo} returns this
 */
proto.payload.StorageInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.TemperatureSensorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.TemperatureSensorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.TemperatureSensorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TemperatureSensorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    id: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.TemperatureSensorInfo}
 */
proto.payload.TemperatureSensorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.TemperatureSensorInfo;
  return proto.payload.TemperatureSensorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.TemperatureSensorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.TemperatureSensorInfo}
 */
proto.payload.TemperatureSensorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.TemperatureSensorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.TemperatureSensorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.TemperatureSensorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.TemperatureSensorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.payload.TemperatureSensorInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.TemperatureSensorInfo} returns this
 */
proto.payload.TemperatureSensorInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 id = 20;
 * @return {number}
 */
proto.payload.TemperatureSensorInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.TemperatureSensorInfo} returns this
 */
proto.payload.TemperatureSensorInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.SensorsInfo.repeatedFields_ = [10,20,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.SensorsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.SensorsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.SensorsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.SensorsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    storagesList: jspb.Message.toObjectList(msg.getStoragesList(),
    proto.payload.StorageInfo.toObject, includeInstance),
    tempSensorsList: jspb.Message.toObjectList(msg.getTempSensorsList(),
    proto.payload.TemperatureSensorInfo.toObject, includeInstance),
    imageSensorsList: jspb.Message.toObjectList(msg.getImageSensorsList(),
    proto.payload.ImagerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.SensorsInfo}
 */
proto.payload.SensorsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.SensorsInfo;
  return proto.payload.SensorsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.SensorsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.SensorsInfo}
 */
proto.payload.SensorsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.payload.StorageInfo;
      reader.readMessage(value,proto.payload.StorageInfo.deserializeBinaryFromReader);
      msg.addStorages(value);
      break;
    case 20:
      var value = new proto.payload.TemperatureSensorInfo;
      reader.readMessage(value,proto.payload.TemperatureSensorInfo.deserializeBinaryFromReader);
      msg.addTempSensors(value);
      break;
    case 30:
      var value = new proto.payload.ImagerInfo;
      reader.readMessage(value,proto.payload.ImagerInfo.deserializeBinaryFromReader);
      msg.addImageSensors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.SensorsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.SensorsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.SensorsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.SensorsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoragesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.payload.StorageInfo.serializeBinaryToWriter
    );
  }
  f = message.getTempSensorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.payload.TemperatureSensorInfo.serializeBinaryToWriter
    );
  }
  f = message.getImageSensorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.payload.ImagerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StorageInfo storages = 10;
 * @return {!Array<!proto.payload.StorageInfo>}
 */
proto.payload.SensorsInfo.prototype.getStoragesList = function() {
  return /** @type{!Array<!proto.payload.StorageInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.StorageInfo, 10));
};


/**
 * @param {!Array<!proto.payload.StorageInfo>} value
 * @return {!proto.payload.SensorsInfo} returns this
*/
proto.payload.SensorsInfo.prototype.setStoragesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.payload.StorageInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.StorageInfo}
 */
proto.payload.SensorsInfo.prototype.addStorages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.payload.StorageInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.SensorsInfo} returns this
 */
proto.payload.SensorsInfo.prototype.clearStoragesList = function() {
  return this.setStoragesList([]);
};


/**
 * repeated TemperatureSensorInfo temp_sensors = 20;
 * @return {!Array<!proto.payload.TemperatureSensorInfo>}
 */
proto.payload.SensorsInfo.prototype.getTempSensorsList = function() {
  return /** @type{!Array<!proto.payload.TemperatureSensorInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.TemperatureSensorInfo, 20));
};


/**
 * @param {!Array<!proto.payload.TemperatureSensorInfo>} value
 * @return {!proto.payload.SensorsInfo} returns this
*/
proto.payload.SensorsInfo.prototype.setTempSensorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.payload.TemperatureSensorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.TemperatureSensorInfo}
 */
proto.payload.SensorsInfo.prototype.addTempSensors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.payload.TemperatureSensorInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.SensorsInfo} returns this
 */
proto.payload.SensorsInfo.prototype.clearTempSensorsList = function() {
  return this.setTempSensorsList([]);
};


/**
 * repeated ImagerInfo image_sensors = 30;
 * @return {!Array<!proto.payload.ImagerInfo>}
 */
proto.payload.SensorsInfo.prototype.getImageSensorsList = function() {
  return /** @type{!Array<!proto.payload.ImagerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.ImagerInfo, 30));
};


/**
 * @param {!Array<!proto.payload.ImagerInfo>} value
 * @return {!proto.payload.SensorsInfo} returns this
*/
proto.payload.SensorsInfo.prototype.setImageSensorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.payload.ImagerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.ImagerInfo}
 */
proto.payload.SensorsInfo.prototype.addImageSensors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.payload.ImagerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.SensorsInfo} returns this
 */
proto.payload.SensorsInfo.prototype.clearImageSensorsList = function() {
  return this.setImageSensorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.BufferInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.BufferInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.BufferInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BufferInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.BufferInfo}
 */
proto.payload.BufferInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.BufferInfo;
  return proto.payload.BufferInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.BufferInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.BufferInfo}
 */
proto.payload.BufferInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.BufferInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.BufferInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.BufferInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.BufferInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      10,
      f
    );
  }
};


/**
 * optional fixed64 timestamp = 10;
 * @return {number}
 */
proto.payload.BufferInfo.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.BufferInfo} returns this
 */
proto.payload.BufferInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.FrameDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.FrameDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.FrameDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.FrameDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getFieldWithDefault(msg, 10, 0),
    height: jspb.Message.getFieldWithDefault(msg, 20, 0),
    type: jspb.Message.getFieldWithDefault(msg, 30, ""),
    fullDataWidth: jspb.Message.getFieldWithDefault(msg, 40, 0),
    fullDataHeight: jspb.Message.getFieldWithDefault(msg, 50, 0),
    rgbWidth: jspb.Message.getFieldWithDefault(msg, 60, 0),
    rgbHeight: jspb.Message.getFieldWithDefault(msg, 70, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.FrameDetails}
 */
proto.payload.FrameDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.FrameDetails;
  return proto.payload.FrameDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.FrameDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.FrameDetails}
 */
proto.payload.FrameDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFullDataWidth(value);
      break;
    case 50:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFullDataHeight(value);
      break;
    case 60:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRgbWidth(value);
      break;
    case 70:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRgbHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.FrameDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.FrameDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.FrameDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.FrameDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getFullDataWidth();
  if (f !== 0) {
    writer.writeUint32(
      40,
      f
    );
  }
  f = message.getFullDataHeight();
  if (f !== 0) {
    writer.writeUint32(
      50,
      f
    );
  }
  f = message.getRgbWidth();
  if (f !== 0) {
    writer.writeUint32(
      60,
      f
    );
  }
  f = message.getRgbHeight();
  if (f !== 0) {
    writer.writeUint32(
      70,
      f
    );
  }
};


/**
 * optional uint32 width = 10;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 height = 20;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional string type = 30;
 * @return {string}
 */
proto.payload.FrameDetails.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional uint32 full_data_width = 40;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getFullDataWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 40, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setFullDataWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 40, value);
};


/**
 * optional uint32 full_data_height = 50;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getFullDataHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setFullDataHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 50, value);
};


/**
 * optional uint32 rgb_width = 60;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getRgbWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setRgbWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 60, value);
};


/**
 * optional uint32 rgb_height = 70;
 * @return {number}
 */
proto.payload.FrameDetails.prototype.getRgbHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 70, 0));
};


/**
 * @param {number} value
 * @return {!proto.payload.FrameDetails} returns this
 */
proto.payload.FrameDetails.prototype.setRgbHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 70, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.ClientRequest.repeatedFields_ = [20,30,40];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcName: jspb.Message.getFieldWithDefault(msg, 10, ""),
    funcInt32ParamList: (f = jspb.Message.getRepeatedField(msg, 20)) == null ? undefined : f,
    funcFloatParamList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 30)) == null ? undefined : f,
    funcBytesParamList: msg.getFuncBytesParamList_asB64(),
    expectReply: jspb.Message.getBooleanFieldWithDefault(msg, 50, false),
    frameType: (f = msg.getFrameType()) && proto.payload.FrameDetails.toObject(includeInstance, f),
    sensorsInfo: (f = msg.getSensorsInfo()) && proto.payload.SensorsInfo.toObject(includeInstance, f),
    messageId: jspb.Message.getFieldWithDefault(msg, 80, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ClientRequest}
 */
proto.payload.ClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ClientRequest;
  return proto.payload.ClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ClientRequest}
 */
proto.payload.ClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuncName(value);
      break;
    case 20:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFuncInt32Param(values[i]);
      }
      break;
    case 30:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFuncFloatParam(values[i]);
      }
      break;
    case 40:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addFuncBytesParam(value);
      break;
    case 50:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpectReply(value);
      break;
    case 60:
      var value = new proto.payload.FrameDetails;
      reader.readMessage(value,proto.payload.FrameDetails.deserializeBinaryFromReader);
      msg.setFrameType(value);
      break;
    case 70:
      var value = new proto.payload.SensorsInfo;
      reader.readMessage(value,proto.payload.SensorsInfo.deserializeBinaryFromReader);
      msg.setSensorsInfo(value);
      break;
    case 80:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuncName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFuncInt32ParamList();
  if (f.length > 0) {
    writer.writePackedInt32(
      20,
      f
    );
  }
  f = message.getFuncFloatParamList();
  if (f.length > 0) {
    writer.writePackedFloat(
      30,
      f
    );
  }
  f = message.getFuncBytesParamList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      40,
      f
    );
  }
  f = message.getExpectReply();
  if (f) {
    writer.writeBool(
      50,
      f
    );
  }
  f = message.getFrameType();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.payload.FrameDetails.serializeBinaryToWriter
    );
  }
  f = message.getSensorsInfo();
  if (f != null) {
    writer.writeMessage(
      70,
      f,
      proto.payload.SensorsInfo.serializeBinaryToWriter
    );
  }
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      80,
      f
    );
  }
};


/**
 * optional string func_name = 10;
 * @return {string}
 */
proto.payload.ClientRequest.prototype.getFuncName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setFuncName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated int32 func_int32_param = 20;
 * @return {!Array<number>}
 */
proto.payload.ClientRequest.prototype.getFuncInt32ParamList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 20));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setFuncInt32ParamList = function(value) {
  return jspb.Message.setField(this, 20, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.addFuncInt32Param = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 20, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.clearFuncInt32ParamList = function() {
  return this.setFuncInt32ParamList([]);
};


/**
 * repeated float func_float_param = 30;
 * @return {!Array<number>}
 */
proto.payload.ClientRequest.prototype.getFuncFloatParamList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 30));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setFuncFloatParamList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.addFuncFloatParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.clearFuncFloatParamList = function() {
  return this.setFuncFloatParamList([]);
};


/**
 * repeated bytes func_bytes_param = 40;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.payload.ClientRequest.prototype.getFuncBytesParamList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 40));
};


/**
 * repeated bytes func_bytes_param = 40;
 * This is a type-conversion wrapper around `getFuncBytesParamList()`
 * @return {!Array<string>}
 */
proto.payload.ClientRequest.prototype.getFuncBytesParamList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getFuncBytesParamList()));
};


/**
 * repeated bytes func_bytes_param = 40;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFuncBytesParamList()`
 * @return {!Array<!Uint8Array>}
 */
proto.payload.ClientRequest.prototype.getFuncBytesParamList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getFuncBytesParamList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setFuncBytesParamList = function(value) {
  return jspb.Message.setField(this, 40, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.addFuncBytesParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 40, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.clearFuncBytesParamList = function() {
  return this.setFuncBytesParamList([]);
};


/**
 * optional bool expect_reply = 50;
 * @return {boolean}
 */
proto.payload.ClientRequest.prototype.getExpectReply = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 50, false));
};


/**
 * @param {boolean} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setExpectReply = function(value) {
  return jspb.Message.setProto3BooleanField(this, 50, value);
};


/**
 * optional FrameDetails frame_type = 60;
 * @return {?proto.payload.FrameDetails}
 */
proto.payload.ClientRequest.prototype.getFrameType = function() {
  return /** @type{?proto.payload.FrameDetails} */ (
    jspb.Message.getWrapperField(this, proto.payload.FrameDetails, 60));
};


/**
 * @param {?proto.payload.FrameDetails|undefined} value
 * @return {!proto.payload.ClientRequest} returns this
*/
proto.payload.ClientRequest.prototype.setFrameType = function(value) {
  return jspb.Message.setWrapperField(this, 60, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.clearFrameType = function() {
  return this.setFrameType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ClientRequest.prototype.hasFrameType = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional SensorsInfo sensors_info = 70;
 * @return {?proto.payload.SensorsInfo}
 */
proto.payload.ClientRequest.prototype.getSensorsInfo = function() {
  return /** @type{?proto.payload.SensorsInfo} */ (
    jspb.Message.getWrapperField(this, proto.payload.SensorsInfo, 70));
};


/**
 * @param {?proto.payload.SensorsInfo|undefined} value
 * @return {!proto.payload.ClientRequest} returns this
*/
proto.payload.ClientRequest.prototype.setSensorsInfo = function(value) {
  return jspb.Message.setWrapperField(this, 70, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.clearSensorsInfo = function() {
  return this.setSensorsInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ClientRequest.prototype.hasSensorsInfo = function() {
  return jspb.Message.getField(this, 70) != null;
};


/**
 * optional string message_id = 80;
 * @return {string}
 */
proto.payload.ClientRequest.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 80, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ClientRequest} returns this
 */
proto.payload.ClientRequest.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 80, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payload.ServerResponse.repeatedFields_ = [30,40,50,70];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payload.ServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payload.ServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payload.ServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceHandle: jspb.Message.getFieldWithDefault(msg, 10, ""),
    status: jspb.Message.getFieldWithDefault(msg, 20, 0),
    int32PayloadList: (f = jspb.Message.getRepeatedField(msg, 30)) == null ? undefined : f,
    floatPayloadList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 40)) == null ? undefined : f,
    bytesPayloadList: msg.getBytesPayloadList_asB64(),
    serverStatus: jspb.Message.getFieldWithDefault(msg, 60, 0),
    availableFrameTypesList: jspb.Message.toObjectList(msg.getAvailableFrameTypesList(),
    proto.payload.FrameDetails.toObject, includeInstance),
    sensorsInfo: (f = msg.getSensorsInfo()) && proto.payload.SensorsInfo.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 90, ""),
    bufferDetails: (f = msg.getBufferDetails()) && proto.payload.BufferInfo.toObject(includeInstance, f),
    cameraType: jspb.Message.getFieldWithDefault(msg, 110, 0),
    messageId: jspb.Message.getFieldWithDefault(msg, 120, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payload.ServerResponse}
 */
proto.payload.ServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payload.ServerResponse;
  return proto.payload.ServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payload.ServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payload.ServerResponse}
 */
proto.payload.ServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceHandle(value);
      break;
    case 20:
      var value = /** @type {!proto.payload.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 30:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addInt32Payload(values[i]);
      }
      break;
    case 40:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFloatPayload(values[i]);
      }
      break;
    case 50:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addBytesPayload(value);
      break;
    case 60:
      var value = /** @type {!proto.payload.ServerStatus} */ (reader.readEnum());
      msg.setServerStatus(value);
      break;
    case 70:
      var value = new proto.payload.FrameDetails;
      reader.readMessage(value,proto.payload.FrameDetails.deserializeBinaryFromReader);
      msg.addAvailableFrameTypes(value);
      break;
    case 80:
      var value = new proto.payload.SensorsInfo;
      reader.readMessage(value,proto.payload.SensorsInfo.deserializeBinaryFromReader);
      msg.setSensorsInfo(value);
      break;
    case 90:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 100:
      var value = new proto.payload.BufferInfo;
      reader.readMessage(value,proto.payload.BufferInfo.deserializeBinaryFromReader);
      msg.setBufferDetails(value);
      break;
    case 110:
      var value = /** @type {!proto.payload.CameraType} */ (reader.readEnum());
      msg.setCameraType(value);
      break;
    case 120:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payload.ServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payload.ServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payload.ServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payload.ServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceHandle();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getInt32PayloadList();
  if (f.length > 0) {
    writer.writePackedInt32(
      30,
      f
    );
  }
  f = message.getFloatPayloadList();
  if (f.length > 0) {
    writer.writePackedFloat(
      40,
      f
    );
  }
  f = message.getBytesPayloadList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      50,
      f
    );
  }
  f = message.getServerStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      60,
      f
    );
  }
  f = message.getAvailableFrameTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      70,
      f,
      proto.payload.FrameDetails.serializeBinaryToWriter
    );
  }
  f = message.getSensorsInfo();
  if (f != null) {
    writer.writeMessage(
      80,
      f,
      proto.payload.SensorsInfo.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      90,
      f
    );
  }
  f = message.getBufferDetails();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.payload.BufferInfo.serializeBinaryToWriter
    );
  }
  f = message.getCameraType();
  if (f !== 0.0) {
    writer.writeEnum(
      110,
      f
    );
  }
  f = message.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      120,
      f
    );
  }
};


/**
 * optional string device_handle = 10;
 * @return {string}
 */
proto.payload.ServerResponse.prototype.getDeviceHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setDeviceHandle = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Status status = 20;
 * @return {!proto.payload.Status}
 */
proto.payload.ServerResponse.prototype.getStatus = function() {
  return /** @type {!proto.payload.Status} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.payload.Status} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * repeated int32 int32_payload = 30;
 * @return {!Array<number>}
 */
proto.payload.ServerResponse.prototype.getInt32PayloadList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 30));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setInt32PayloadList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.addInt32Payload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearInt32PayloadList = function() {
  return this.setInt32PayloadList([]);
};


/**
 * repeated float float_payload = 40;
 * @return {!Array<number>}
 */
proto.payload.ServerResponse.prototype.getFloatPayloadList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 40));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setFloatPayloadList = function(value) {
  return jspb.Message.setField(this, 40, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.addFloatPayload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 40, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearFloatPayloadList = function() {
  return this.setFloatPayloadList([]);
};


/**
 * repeated bytes bytes_payload = 50;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.payload.ServerResponse.prototype.getBytesPayloadList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 50));
};


/**
 * repeated bytes bytes_payload = 50;
 * This is a type-conversion wrapper around `getBytesPayloadList()`
 * @return {!Array<string>}
 */
proto.payload.ServerResponse.prototype.getBytesPayloadList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getBytesPayloadList()));
};


/**
 * repeated bytes bytes_payload = 50;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesPayloadList()`
 * @return {!Array<!Uint8Array>}
 */
proto.payload.ServerResponse.prototype.getBytesPayloadList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getBytesPayloadList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setBytesPayloadList = function(value) {
  return jspb.Message.setField(this, 50, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.addBytesPayload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 50, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearBytesPayloadList = function() {
  return this.setBytesPayloadList([]);
};


/**
 * optional ServerStatus server_status = 60;
 * @return {!proto.payload.ServerStatus}
 */
proto.payload.ServerResponse.prototype.getServerStatus = function() {
  return /** @type {!proto.payload.ServerStatus} */ (jspb.Message.getFieldWithDefault(this, 60, 0));
};


/**
 * @param {!proto.payload.ServerStatus} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setServerStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 60, value);
};


/**
 * repeated FrameDetails available_frame_types = 70;
 * @return {!Array<!proto.payload.FrameDetails>}
 */
proto.payload.ServerResponse.prototype.getAvailableFrameTypesList = function() {
  return /** @type{!Array<!proto.payload.FrameDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payload.FrameDetails, 70));
};


/**
 * @param {!Array<!proto.payload.FrameDetails>} value
 * @return {!proto.payload.ServerResponse} returns this
*/
proto.payload.ServerResponse.prototype.setAvailableFrameTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 70, value);
};


/**
 * @param {!proto.payload.FrameDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payload.FrameDetails}
 */
proto.payload.ServerResponse.prototype.addAvailableFrameTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 70, opt_value, proto.payload.FrameDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearAvailableFrameTypesList = function() {
  return this.setAvailableFrameTypesList([]);
};


/**
 * optional SensorsInfo sensors_info = 80;
 * @return {?proto.payload.SensorsInfo}
 */
proto.payload.ServerResponse.prototype.getSensorsInfo = function() {
  return /** @type{?proto.payload.SensorsInfo} */ (
    jspb.Message.getWrapperField(this, proto.payload.SensorsInfo, 80));
};


/**
 * @param {?proto.payload.SensorsInfo|undefined} value
 * @return {!proto.payload.ServerResponse} returns this
*/
proto.payload.ServerResponse.prototype.setSensorsInfo = function(value) {
  return jspb.Message.setWrapperField(this, 80, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearSensorsInfo = function() {
  return this.setSensorsInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ServerResponse.prototype.hasSensorsInfo = function() {
  return jspb.Message.getField(this, 80) != null;
};


/**
 * optional string message = 90;
 * @return {string}
 */
proto.payload.ServerResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 90, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 90, value);
};


/**
 * optional BufferInfo buffer_details = 100;
 * @return {?proto.payload.BufferInfo}
 */
proto.payload.ServerResponse.prototype.getBufferDetails = function() {
  return /** @type{?proto.payload.BufferInfo} */ (
    jspb.Message.getWrapperField(this, proto.payload.BufferInfo, 100));
};


/**
 * @param {?proto.payload.BufferInfo|undefined} value
 * @return {!proto.payload.ServerResponse} returns this
*/
proto.payload.ServerResponse.prototype.setBufferDetails = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.clearBufferDetails = function() {
  return this.setBufferDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payload.ServerResponse.prototype.hasBufferDetails = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional CameraType camera_type = 110;
 * @return {!proto.payload.CameraType}
 */
proto.payload.ServerResponse.prototype.getCameraType = function() {
  return /** @type {!proto.payload.CameraType} */ (jspb.Message.getFieldWithDefault(this, 110, 0));
};


/**
 * @param {!proto.payload.CameraType} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setCameraType = function(value) {
  return jspb.Message.setProto3EnumField(this, 110, value);
};


/**
 * optional string message_id = 120;
 * @return {string}
 */
proto.payload.ServerResponse.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 120, ""));
};


/**
 * @param {string} value
 * @return {!proto.payload.ServerResponse} returns this
 */
proto.payload.ServerResponse.prototype.setMessageId = function(value) {
  return jspb.Message.setProto3StringField(this, 120, value);
};


/**
 * @enum {number}
 */
proto.payload.Status = {
  OK: 0,
  BUSY: 1,
  UNREACHABLE: 2,
  INVALID_ARGUMENT: 3,
  UNAVAILABLE: 4,
  GENERIC_ERROR: 5
};

/**
 * @enum {number}
 */
proto.payload.ServerStatus = {
  REQUEST_ACCEPTED: 0,
  REQUEST_UNKNOWN: 1
};

/**
 * @enum {number}
 */
proto.payload.CameraType = {
  AD_96TOF1_EBZ: 0,
  AD_FXTOF1_EBZ: 1,
  SMART_3D_CAMERA: 2
};

goog.object.extend(exports, proto.payload);
